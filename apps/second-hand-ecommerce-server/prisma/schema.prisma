datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String?
  price        Float?
  description  String?
  brand        Brand?        @relation(fields: [brandId], references: [id])
  brandId      String?
  seller       String?
  category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   String?
  images       Image[]
  transactions Transaction[]
  offers       Offer[]
  createdBy    String?
  updatedBy    String?
  deletedBy    String?
  orders       Order[]
  reviews      Review[]
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  name      String?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model Brand {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  name      String?
  createdBy String?
  updatedBy String?
  deletedBy String?
}

model Variation {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  size      EnumVariationSize?
  color     EnumVariationColor?
  key       String?
  value     String?
  createdBy String?
  deletedBy String?
  updatedBy String?
}

model Offer {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  offerAmount Float?
  status      EnumOfferStatus?
  buyer       String?
  product     Product?         @relation(fields: [productId], references: [id])
  productId   String?
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
}

model Transaction {
  id        String                 @id @default(cuid())
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  amount    Float?
  status    EnumTransactionStatus?
  buyer     String?
  product   Product?               @relation(fields: [productId], references: [id])
  productId String?
  updatedBy String?
  deletedBy String?
  createdBy String?
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  deletedBy String?
  createdBy String?
  updatedBy String?
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  firstName          String?
  lastName           String?
  username           String               @unique
  email              String?              @unique
  password           String
  roles              Json
  createdBy          String?
  updatedBy          String?
  deletedBy          String?
  pushNotifications  Boolean?
  emailNotifications Boolean?
  profileImage       String?
  emailVerified      Boolean?
  sentNotifications  SentNotification[]
  city               String?
  state              String?
  zipCode            String?
  accountNumber      String?
  street             String?
  country            String?
  bankName           String?
  routingNumber      String?
  accountType        EnumUserAccountType?
  reviews            Review[]
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followed  String?
  follower  String?
}

model SentNotification {
  id        String                         @id @default(cuid())
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  typeField EnumSentNotificationTypeField?
  message   String?
  user      User?                          @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  amount    Float?
  status    EnumOrderStatus?
  seller    String?
  product   Product?         @relation(fields: [productId], references: [id])
  productId String?
  buyer     String?
  updatedBy String?
  deletedBy String?
  createdBy String?
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Float?
  comment   String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model AuditLog {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  changedAt     DateTime?
  entityName    String?
  entityId      String?
  previousValue Json?
  newValue      Json?
  fieldName     String?
  changedBy     String?
}

enum EnumVariationSize {
  Option1
}

enum EnumVariationColor {
  Option1
}

enum EnumOfferStatus {
  Option1
}

enum EnumTransactionStatus {
  Option1
}

enum EnumUserAccountType {
  Option1
}

enum EnumSentNotificationTypeField {
  Option1
}

enum EnumOrderStatus {
  Option1
}
