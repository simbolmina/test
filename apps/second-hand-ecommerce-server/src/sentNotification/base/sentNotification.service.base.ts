/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SentNotification as PrismaSentNotification,
  User as PrismaUser,
} from "@prisma/client";

export class SentNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SentNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sentNotification.count(args);
  }

  async sentNotifications(
    args: Prisma.SentNotificationFindManyArgs
  ): Promise<PrismaSentNotification[]> {
    return this.prisma.sentNotification.findMany(args);
  }
  async sentNotification(
    args: Prisma.SentNotificationFindUniqueArgs
  ): Promise<PrismaSentNotification | null> {
    return this.prisma.sentNotification.findUnique(args);
  }
  async createSentNotification(
    args: Prisma.SentNotificationCreateArgs
  ): Promise<PrismaSentNotification> {
    return this.prisma.sentNotification.create(args);
  }
  async updateSentNotification(
    args: Prisma.SentNotificationUpdateArgs
  ): Promise<PrismaSentNotification> {
    return this.prisma.sentNotification.update(args);
  }
  async deleteSentNotification(
    args: Prisma.SentNotificationDeleteArgs
  ): Promise<PrismaSentNotification> {
    return this.prisma.sentNotification.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.sentNotification
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
