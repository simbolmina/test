/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SentNotification } from "./SentNotification";
import { SentNotificationCountArgs } from "./SentNotificationCountArgs";
import { SentNotificationFindManyArgs } from "./SentNotificationFindManyArgs";
import { SentNotificationFindUniqueArgs } from "./SentNotificationFindUniqueArgs";
import { CreateSentNotificationArgs } from "./CreateSentNotificationArgs";
import { UpdateSentNotificationArgs } from "./UpdateSentNotificationArgs";
import { DeleteSentNotificationArgs } from "./DeleteSentNotificationArgs";
import { User } from "../../user/base/User";
import { SentNotificationService } from "../sentNotification.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SentNotification)
export class SentNotificationResolverBase {
  constructor(
    protected readonly service: SentNotificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "read",
    possession: "any",
  })
  async _sentNotificationsMeta(
    @graphql.Args() args: SentNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SentNotification])
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "read",
    possession: "any",
  })
  async sentNotifications(
    @graphql.Args() args: SentNotificationFindManyArgs
  ): Promise<SentNotification[]> {
    return this.service.sentNotifications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SentNotification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "read",
    possession: "own",
  })
  async sentNotification(
    @graphql.Args() args: SentNotificationFindUniqueArgs
  ): Promise<SentNotification | null> {
    const result = await this.service.sentNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SentNotification)
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "create",
    possession: "any",
  })
  async createSentNotification(
    @graphql.Args() args: CreateSentNotificationArgs
  ): Promise<SentNotification> {
    return await this.service.createSentNotification({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SentNotification)
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "update",
    possession: "any",
  })
  async updateSentNotification(
    @graphql.Args() args: UpdateSentNotificationArgs
  ): Promise<SentNotification | null> {
    try {
      return await this.service.updateSentNotification({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SentNotification)
  @nestAccessControl.UseRoles({
    resource: "SentNotification",
    action: "delete",
    possession: "any",
  })
  async deleteSentNotification(
    @graphql.Args() args: DeleteSentNotificationArgs
  ): Promise<SentNotification | null> {
    try {
      return await this.service.deleteSentNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: SentNotification
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
