/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Brand as PrismaBrand,
  Product as PrismaProduct,
} from "@prisma/client";

export class BrandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BrandCountArgs, "select">): Promise<number> {
    return this.prisma.brand.count(args);
  }

  async brands(args: Prisma.BrandFindManyArgs): Promise<PrismaBrand[]> {
    return this.prisma.brand.findMany(args);
  }
  async brand(args: Prisma.BrandFindUniqueArgs): Promise<PrismaBrand | null> {
    return this.prisma.brand.findUnique(args);
  }
  async createBrand(args: Prisma.BrandCreateArgs): Promise<PrismaBrand> {
    return this.prisma.brand.create(args);
  }
  async updateBrand(args: Prisma.BrandUpdateArgs): Promise<PrismaBrand> {
    return this.prisma.brand.update(args);
  }
  async deleteBrand(args: Prisma.BrandDeleteArgs): Promise<PrismaBrand> {
    return this.prisma.brand.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.brand
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
