/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Variation as PrismaVariation } from "@prisma/client";

export class VariationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VariationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.variation.count(args);
  }

  async variations(
    args: Prisma.VariationFindManyArgs
  ): Promise<PrismaVariation[]> {
    return this.prisma.variation.findMany(args);
  }
  async variation(
    args: Prisma.VariationFindUniqueArgs
  ): Promise<PrismaVariation | null> {
    return this.prisma.variation.findUnique(args);
  }
  async createVariation(
    args: Prisma.VariationCreateArgs
  ): Promise<PrismaVariation> {
    return this.prisma.variation.create(args);
  }
  async updateVariation(
    args: Prisma.VariationUpdateArgs
  ): Promise<PrismaVariation> {
    return this.prisma.variation.update(args);
  }
  async deleteVariation(
    args: Prisma.VariationDeleteArgs
  ): Promise<PrismaVariation> {
    return this.prisma.variation.delete(args);
  }
}
