/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Variation } from "./Variation";
import { VariationCountArgs } from "./VariationCountArgs";
import { VariationFindManyArgs } from "./VariationFindManyArgs";
import { VariationFindUniqueArgs } from "./VariationFindUniqueArgs";
import { CreateVariationArgs } from "./CreateVariationArgs";
import { UpdateVariationArgs } from "./UpdateVariationArgs";
import { DeleteVariationArgs } from "./DeleteVariationArgs";
import { VariationService } from "../variation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Variation)
export class VariationResolverBase {
  constructor(
    protected readonly service: VariationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "read",
    possession: "any",
  })
  async _variationsMeta(
    @graphql.Args() args: VariationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Variation])
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "read",
    possession: "any",
  })
  async variations(
    @graphql.Args() args: VariationFindManyArgs
  ): Promise<Variation[]> {
    return this.service.variations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Variation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "read",
    possession: "own",
  })
  async variation(
    @graphql.Args() args: VariationFindUniqueArgs
  ): Promise<Variation | null> {
    const result = await this.service.variation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Variation)
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "create",
    possession: "any",
  })
  async createVariation(
    @graphql.Args() args: CreateVariationArgs
  ): Promise<Variation> {
    return await this.service.createVariation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Variation)
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "update",
    possession: "any",
  })
  async updateVariation(
    @graphql.Args() args: UpdateVariationArgs
  ): Promise<Variation | null> {
    try {
      return await this.service.updateVariation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Variation)
  @nestAccessControl.UseRoles({
    resource: "Variation",
    action: "delete",
    possession: "any",
  })
  async deleteVariation(
    @graphql.Args() args: DeleteVariationArgs
  ): Promise<Variation | null> {
    try {
      return await this.service.deleteVariation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
