/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AuditLogService } from "../auditLog.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AuditLogCreateInput } from "./AuditLogCreateInput";
import { AuditLog } from "./AuditLog";
import { AuditLogFindManyArgs } from "./AuditLogFindManyArgs";
import { AuditLogWhereUniqueInput } from "./AuditLogWhereUniqueInput";
import { AuditLogUpdateInput } from "./AuditLogUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AuditLogControllerBase {
  constructor(
    protected readonly service: AuditLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuditLog })
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAuditLog(
    @common.Body() data: AuditLogCreateInput
  ): Promise<AuditLog> {
    return await this.service.createAuditLog({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changedAt: true,
        entityName: true,
        entityId: true,
        previousValue: true,
        newValue: true,
        fieldName: true,
        changedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AuditLog] })
  @ApiNestedQuery(AuditLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async auditLogs(@common.Req() request: Request): Promise<AuditLog[]> {
    const args = plainToClass(AuditLogFindManyArgs, request.query);
    return this.service.auditLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changedAt: true,
        entityName: true,
        entityId: true,
        previousValue: true,
        newValue: true,
        fieldName: true,
        changedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async auditLog(
    @common.Param() params: AuditLogWhereUniqueInput
  ): Promise<AuditLog | null> {
    const result = await this.service.auditLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changedAt: true,
        entityName: true,
        entityId: true,
        previousValue: true,
        newValue: true,
        fieldName: true,
        changedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAuditLog(
    @common.Param() params: AuditLogWhereUniqueInput,
    @common.Body() data: AuditLogUpdateInput
  ): Promise<AuditLog | null> {
    try {
      return await this.service.updateAuditLog({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          changedAt: true,
          entityName: true,
          entityId: true,
          previousValue: true,
          newValue: true,
          fieldName: true,
          changedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAuditLog(
    @common.Param() params: AuditLogWhereUniqueInput
  ): Promise<AuditLog | null> {
    try {
      return await this.service.deleteAuditLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          changedAt: true,
          entityName: true,
          entityId: true,
          previousValue: true,
          newValue: true,
          fieldName: true,
          changedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
